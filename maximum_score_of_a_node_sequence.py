from typing import List

# complexity: V ^ 2 * E
class Solution:
    def maximumScore1(self, scores: List[int], edges: List[List[int]]) -> int:
        n_vertex = len(scores)
        A = [[[] for _ in range(n_vertex)] for _ in range(n_vertex)]
        for e in edges: 
            v1, v2 = e[0], e[1]
            s = scores[v1] + scores[v2]
            A[v1][v2] += [(s, {v1, v2})]
            A[v2][v1] += [(s, {v1, v2})]
        for k in range(2, 4): 
            A_k = []
            n_max = -1 
            for i in range(n_vertex): 
                A_k += [[]]
                for j in range(n_vertex): 
                # for j in range(i): 
                    hash_table = []
                    def hash(v_set, n_vertex=n_vertex):
                        h = "0" * n_vertex
                        for i in v_set: h[i] = "1"
                        return h
                    full_cases = []
                    for p in range(n_vertex): 
                        if [i, p] in edges or [p, i] in edges:
                            if p != i and p != j: 
                                for s, v_set in A[p][j]:
                                    if i in v_set: 
                                        continue 
                                    s = scores[i] + s
                                    v_set = v_set.union({i})
                                    h_str = hash(v_set)
                                    if h_str not in hash_table:
                                        full_cases += [(s, v_set)]
                                        hash_table += [h_str]
                                    n_max = max(s, n_max)
                    A_k[-1] += [full_cases]
                    # n_rep = 0 
                    # for i in range(len(full_cases)):
                    #     for j in range(len(full_cases)):
                    #         if i != j: 
                    #             if full_cases[i][-1] == full_cases[j][-1]: 
                    #                 n_rep += 1
                    # print(n_rep)
                A_k[-1] += [[] for _ in range(i, n_vertex)]
            A = A_k
        # n_max = -1 
        # for i in range(n_vertex): 
        #     for j in range(n_vertex): 
        #         l = [x[0] for x in A[i][j]] + [n_max]
        #         n_max = max(l) 
                # idx = l.index(n_max)
                # if idx < len(l) - 1: 
                #     print(n_max)
                #     print(A[i][j][idx])
        return n_max
    
    def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:
        n_vertex = len(scores)
        # table = [[0] * n_vertex for _ in range(n_vertex)]
        # for start, end in edges: 
        #     table[start][end] = 1
        #     table[end][start] = 1
        adjacency_list = [[] for _ in range(n_vertex)]
        max_score = -1
        only_det = False
        if len(set(scores)) == 1: only_det = True
        for i in range(len(edges)): 
            adjacency_list[edges[i][0]] += [edges[i][1]]
            adjacency_list[edges[i][1]] += [edges[i][0]]
            # if edges[i][0] > edges[i][1]: 
            #     edges[i] = [edges[i][1], edges[i][0]]
        for start, end in edges: 
            # c_start = [(i, scores[i]) for i, val in enumerate(table[start]) if val and i != end]
            # c_end = [(i, scores[i]) for i, val in enumerate(table[end]) if val and i != start]
            # c_start = [(v2, scores[v2]) if start == v1 else (v1, scores[v1])
            #         for i, (v1, v2) in enumerate(edges) if start in [v1, v2] and v2 != end]
            # c_end = [(v1, scores[v1]) if end == v2 else (v2, scores[v2])
            #         for i, (v1, v2) in enumerate(edges) if end in [v1, v2] and v1 != start]
            c_start, c_end = [], []
            max_start = None
            max_end = None
            for i, val in enumerate(adjacency_list[start]):
                if val != end:
                    c_start += [(val, scores[val])]
                    if max_start is None: max_start = (val, scores[val]) 
                    else: 
                        if scores[val] > max_start[1]: 
                            max_start = (val, scores[val])
            for i, val in enumerate(adjacency_list[end]):
                if val != start:
                    c_end += [(val, scores[val])]
                    if max_end is None: max_end = (val, scores[val]) 
                    else: 
                        if scores[val] > max_end[1]: 
                            max_end = (val, scores[val])
            if max_start is None or max_end is None: continue
            if max_start[1] + max_end[1] + scores[start] + scores[end] <= max_score: continue
            # if len(c_start) == 0: continue
            # if len(c_end) == 0: continue
            # max_start = max(c_start, key=lambda x: x[1])
            # max_end = max(c_end, key=lambda x: x[1])
            if max_start[0] == max_end[0]: # detect circular
                idx = c_start.index(max_start)
                c_start.pop(idx)
                if len(c_start) == 0: 
                    max_start2 = None
                else:
                    max_start2 = max(c_start, key=lambda x: x[1])
                
                idx = c_end.index(max_end)
                c_end.pop(idx)
                if len(c_end) == 0: 
                    max_end2 = None
                else:
                    max_end2 = max(c_end, key=lambda x: x[1])
                if max_start2 is None: 
                    if max_end2 is None: 
                        continue 
                    else: 
                        max_sec = max_end2
                elif max_end2 is None: 
                    max_sec = max_start2
                else:
                    max_sec = max(max_start2, max_end2, key=lambda x: x[1])
                score = max_start[1] + max_sec[1]
            else: 
                score = max_start[1] + max_end[1]
            score += scores[start] + scores[end]
            max_score = max(max_score, score)
            if only_det and max_score > 0: return max_score
        return max_score

if __name__ == "__main__": 
    test_case = (
        [19980,61478,50878,41593,40152,97496,24162,78540,59500,48146,27540,18329,99133,57575,71974,86786,81699,62134,25301,31921,52937,7608,38616,8177,85188,64344,53028,19464,33735,11791,69794,22211,81037,13690,77194,40043,65177,46181,53985,89719,2267,52741,99009,85455,4691,72143,40844,19713,55772,48739,52357,81268,27578,12017,61582], 
        [[25,52],[52,20],[20,15],[15,43],[43,17],[17,4],[16,44],[44,51],[51,24],[36,32],[32,17],[17,47],[4,53],[53,39],[39,0],[49,38],[38,14],[14,31],[6,47],[47,43],[43,3],[52,33],[33,14],[14,53],[5,44],[44,29],[29,8],[36,29],[29,35],[35,17],[49,46],[46,4],[4,10],[9,37],[37,22],[22,7],[25,27],[27,6],[6,15],[11,4],[4,36],[36,53],[5,15],[15,28],[28,54],[24,54],[54,47],[47,40],[2,52],[52,3],[3,33],[33,45],[45,49],[49,51],[23,26],[26,41],[41,42],[28,29],[29,22],[22,18],[9,38],[38,50],[50,27],[4,7],[7,13],[13,34],[2,38],[38,36],[36,10],[30,40],[40,52],[52,21],[52,8],[8,22],[22,0],[40,3],[3,29],[9,40],[40,31],[31,25],[18,5],[5,46],[46,43],[46,30],[30,0],[0,25],[28,40],[3,46],[11,43],[43,45],[45,15],[49,50],[50,25],[19,0],[0,51],[51,47],[29,51],[51,50],[50,34],[6,17],[17,52],[52,39],[33,27],[27,8],[8,25],[5,1],[1,0],[0,3],[39,19],[19,43],[43,40],[27,54],[54,38],[14,28],[28,24],[24,39],[38,7],[7,17],[39,51],[51,43],[43,16],[6,54],[54,42],[42,51],[54,31],[31,48],[21,23],[23,2],[2,29],[28,10],[10,13],[13,27],[51,31],[31,37],[37,14],[54,34],[34,5],[5,17],[36,3],[3,28],[28,35],[23,14],[14,35],[35,30],[2,13],[7,14],[13,52],[52,47],[47,7],[14,11],[11,47],[20,53],[53,0],[10,14],[14,43],[43,28],[7,31],[31,32],[32,14],[45,6],[6,0],[48,38],[38,1],[1,13],[41,11],[11,30],[30,36],[5,27],[27,4],[4,8],[2,43],[43,4],[4,45],[51,6],[6,18],[18,47],[6,30],[30,18],[18,31],[52,11],[11,44],[44,49],[45,30],[36,11],[40,44],[44,50],[47,45],[45,10],[10,15],[14,52],[52,16],[22,39],[39,32],[32,27],[46,21],[21,53],[53,12],[37,28],[3,14],[9,50],[51,41],[1,50],[50,3],[35,50],[50,19],[19,20],[48,50],[50,2],[2,20],[19,6],[6,16],[16,25],[44,46],[46,45],[18,10],[10,5],[5,42],[2,12],[12,1],[1,36],[22,2],[52,0],[54,19],[19,13],[13,6],[30,15],[15,26],[26,21],[24,31],[31,53],[53,27],[27,52],[17,40],[51,8],[8,20],[20,35],[12,9],[9,5],[43,20],[20,54],[32,1],[1,34],[34,23],[36,28],[48,26],[26,18],[18,33],[32,48],[48,21],[44,54],[41,34],[34,27],[27,2],[46,54],[54,50],[15,4],[4,35],[35,42],[17,1],[32,15],[10,42],[42,12],[12,23],[30,32],[47,16],[16,7],[7,27],[50,39],[39,14],[41,33],[33,20],[20,10],[17,29],[29,10],[22,11],[4,50],[30,7],[7,23],[27,45],[45,16],[51,13],[13,48],[48,35],[49,43],[43,12],[12,45],[49,5],[5,16],[16,32],[22,12],[12,24],[24,13],[12,51],[51,2],[2,48],[3,31],[37,44],[39,33],[33,46],[46,2],[21,50],[50,46],[46,23],[22,1],[1,35],[35,13],[42,46],[46,17],[38,12],[22,21],[1,51],[51,5],[5,3],[2,36],[36,7],[7,46],[51,35],[28,12],[31,19],[19,49],[11,48],[48,6],[6,46],[29,0],[0,26],[48,51],[51,34],[3,26],[26,44],[44,24],[53,17],[17,19],[27,39],[39,16],[16,38],[9,51],[51,53],[53,29],[39,20],[20,36],[36,13],[2,6],[27,46],[18,14],[7,8],[40,48],[48,42],[42,13],[21,31],[54,22],[17,38],[38,29],[29,5],[1,10],[10,33],[33,16],[9,44],[49,32],[22,4],[4,13],[13,25],[2,15],[15,14],[2,1],[1,4],[53,44],[44,45],[45,36],[3,19],[50,15],[39,31],[31,13],[13,32],[26,42],[42,32],[32,33],[33,4],[0,31],[31,10],[10,7],[43,5],[5,36],[34,28],[28,9],[51,3],[3,34],[45,48],[48,27],[27,11],[8,15],[15,24],[24,26],[33,0],[0,7],[7,11],[35,18],[18,32],[32,6],[29,52],[52,35],[35,33],[35,38],[38,26],[27,22],[22,44],[44,19],[1,8],[8,0],[52,53],[53,22],[22,30],[52,15],[15,22],[22,10],[36,40],[13,0],[0,21],[23,48],[48,54],[54,5],[38,41],[41,27],[50,17],[17,22],[22,36],[2,28],[28,38],[31,12],[12,10],[10,24],[15,7],[7,33],[11,1],[1,25],[25,51],[51,45],[45,31],[9,21],[21,29],[2,8],[8,14],[14,6],[23,52],[52,50],[50,24],[54,10],[44,41],[41,29],[53,42],[42,22],[23,24],[19,34],[50,26],[33,24],[24,30],[30,52],[53,1],[25,14],[29,24],[33,30],[49,12],[51,27],[15,40],[21,38],[38,27],[15,21],[24,35],[35,54],[54,8],[38,34],[34,21],[21,17],[14,50],[40,45],[0,43],[12,8],[8,30],[30,23],[47,22],[39,46],[26,10],[10,11],[0,40],[40,53],[7,39],[39,5],[52,31],[31,2],[45,32],[33,22],[27,12],[1,29],[29,34],[21,24],[31,9],[52,6],[6,50],[50,11],[32,7],[16,36],[47,0],[47,14],[14,1],[7,18],[18,28],[26,34],[11,38],[2,26],[24,32],[10,40],[40,11],[11,42],[21,19],[19,15],[15,9],[44,39],[27,18],[16,27],[33,13],[16,53],[53,45],[48,7],[33,44],[52,18],[18,53],[53,24],[53,2],[29,4],[41,50],[24,34],[34,35],[23,38],[36,8],[39,48],[23,35],[20,40],[40,1],[29,42],[9,7],[5,38],[38,10],[47,38],[10,30],[30,44],[2,54],[54,7],[10,16],[16,48],[48,18],[11,54],[54,0],[0,27],[51,23],[25,20],[43,35],[35,7],[29,16],[52,38],[47,5],[5,8],[48,22],[22,19],[49,42],[42,39],[16,28],[28,1],[1,31],[28,20],[20,0],[0,42],[38,40],[47,13],[13,22],[34,22],[47,20],[15,51],[51,20],[20,50],[44,14],[14,30],[31,20],[8,47],[7,29],[17,11],[41,52],[35,39],[39,25],[4,54],[54,13],[4,24],[24,2],[2,3],[4,42],[42,6],[12,17],[14,26],[26,43],[26,45],[45,7],[23,47],[47,15],[34,42],[36,25],[25,34],[27,31],[31,50],[50,22],[30,4],[4,34],[23,25],[25,3],[3,17],[25,15],[30,26],[16,19],[19,23],[23,50],[26,52],[52,1],[51,4],[47,42],[30,13],[13,45],[45,35],[44,13],[53,37],[1,54],[54,49],[3,13],[13,18],[3,7],[7,2],[52,37],[37,20],[24,7],[46,34],[34,8],[46,12],[12,48],[48,53],[6,22],[22,45],[45,18],[47,46],[23,8],[49,4],[4,18],[18,37],[11,29],[7,53],[51,54],[54,32]], 
    )
    import time 
    start = time.time()
    ret = Solution().maximumScore(*test_case)
    print(time.time() - start)
    print(ret)